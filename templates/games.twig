{% extends "base.twig" %}

{% block title %}Games - Board Game Reviews{% endblock %}

{% block content %}
    <div class="container mt-4">
        <div class="text-center mb-3">
            <h1 class="display-4 fw-bold text-primary mb-3">Our Board Game Collection</h1>
            <p class="lead text-muted">Discover our curated selection of amazing board games</p>
            <div class="d-flex justify-content-center">
                <div class="border-bottom border-primary" style="width: 100px;"></div>
            </div>
        </div>
    </div>
    <div class="container mt-3">
        <div class="row g-2">
            {% for item in items %}
                <div class="col-md-3 mb-1">
                    <div class="card h-100 d-flex flex-column">
                        <div class="card-body d-flex flex-column">
                            <div class="text-center mb-3">
                                <img src="assets/cover_images/{{ item.image|e }}"
                                    class="img-fluid" 
                                    alt="Board Game Art for {{item.title}}"
                                    style="min-height: 250px; max-height: 250px; width: auto; object-fit: contain;"
                                >
                            </div>
                            <h5 class="card-title text-center mb-3">
                                {{item.title}}
                            </h5>
                            <div class="flex-grow-1 p-1 ">
                                <p class="card-text mb-1">Artists: {{item.artists}}</p>
                                <p class="card-text mb-1">Designers: {{item.designers}}</p>
                                <p class="card-text mb-1">Publishers: {{item.publishers}}</p>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-auto">
                                <span class="badge bg-info">{{ item.player_range }} Players</span>
                                <span class="badge bg-info">{{ item.age_range }}</span>
                                <span class="badge bg-info">{{ item.playtime_range }} Min</span>
                                {% if loggedin %}
                                    <form action="/toggle_favorite.php" method="POST" class="d-inline">
                                        <input type="hidden" name="game_id" value="{{ item.id|e }}">
                                        <input type="hidden" name="csrf_token" value="{{ csrf_token }}">
                                        <button type="submit" class="btn btn-sm {{ item.is_favorited ? 'btn-danger' : 'btn-outline-danger' }}">
                                            <i class="fas fa-heart"></i>
                                        </button>
                                    </form>
                                {% else %}
                                    <a href="/login.php" class="btn btn-sm btn-outline-danger">
                                        <i class="fas fa-heart"></i>
                                    </a>
                                {% endif %}
                            </div>
                            <div class="mt-3">
                                <a href="detail.php?id={{item.id}}" class="btn btn-primary w-100">View details</a>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const favouriteButtons = document.querySelectorAll('.toggle-favourite');
    let lastClickTime = 0;
    const DEBOUNCE_TIME = 500; // 500ms debounce time
    
    favouriteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const currentTime = Date.now();
            if (currentTime - lastClickTime < DEBOUNCE_TIME) {
                return; // Ignore if clicked too soon after last click
            }
            lastClickTime = currentTime;
            
            const gameId = this.dataset.gameId;
            const isCurrentlyFavorited = this.classList.contains('btn-danger');
            
            fetch('/toggle_favorite.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `game_id=${gameId}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Toggle the button classes
                    this.classList.toggle('btn-danger');
                    this.classList.toggle('btn-outline-danger');
                    
                    // Update the heart icon
                    const heartIcon = this.querySelector('i');
                    if (this.classList.contains('btn-danger')) {
                        heartIcon.classList.remove('far');
                        heartIcon.classList.add('fas');
                    } else {
                        heartIcon.classList.remove('fas');
                        heartIcon.classList.add('far');
                    }
                } else {
                    throw new Error(data.message || 'Failed to update favorite status');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message || 'An error occurred while updating favorite status');
                // Revert the button state on error
                if (isCurrentlyFavorited) {
                    this.classList.remove('btn-outline-danger');
                    this.classList.add('btn-danger');
                    const heartIcon = this.querySelector('i');
                    heartIcon.classList.remove('far');
                    heartIcon.classList.add('fas');
                } else {
                    this.classList.remove('btn-danger');
                    this.classList.add('btn-outline-danger');
                    const heartIcon = this.querySelector('i');
                    heartIcon.classList.remove('fas');
                    heartIcon.classList.add('far');
                }
            });
        });
    });
});
</script>
{% endblock %}